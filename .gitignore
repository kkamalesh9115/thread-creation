#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>


int count = 0;
pthread_mutex_t count_mutex;

void *inc_count(void *arg) 
{

    FILE *fp;
    int total = 0;  // Line counter (result)
    
    char c; 
  char *filename=(char *)arg;
  fp = fopen(filename, "r");
 
   
    if (fp == NULL)
    {
        printf("Could not open file %s\n", filename);
        pthread_exit(NULL);
    }
 
    // Extract characters from file and store in character c
    for (c = getc(fp); c != EOF; c = getc(fp))
        if (c == '\n')
	{	total=total+1;
		pthread_mutex_lock(&count_mutex);
		count = count + 1;
		pthread_mutex_unlock(&count_mutex);
	} // Increment count if this character is newline
            
 
    // Close the file
    fclose(fp);
    printf("The file %s has %d lines\n ", filename, total);
  
  
  
   pthread_exit(NULL);
  
}


int main(int argc, char *argv[])
{
  int i, loop, inc;
  
  pthread_t threads[argc-1];
  pthread_attr_t attr;

pthread_mutex_init(&count_mutex, NULL);
  /* For portability, explicitly create threads in a joinable state */
  pthread_attr_init(&attr);
  pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
  
  for (i = 0; i < argc-1; i++) {
    
    
    pthread_create(&threads[i],NULL,inc_count,argv[i+1]);
    }

   for (i = 0; i < argc-1; i++) {
	pthread_join(threads[i],NULL);
	//printf("%d\n",i);
    /* Make call to pthread_join here */
  }


  printf ("Main(): Waited on %d threads, TOTAL COUNT=%d\n",argc-1,count);

pthread_attr_destroy(&attr);
  pthread_mutex_destroy(&count_mutex);
  pthread_exit (NULL);
}
